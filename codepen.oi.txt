console.clear();

//People dropping a form (action creator)

const createPolicy=(name, amount)=>{
  return{
    type:'CREATE_POLICY',
    payload:{
      name:name,
      amount: amount
    }
  }
}
const deletePolicy=(name)=>{
  return{
    type:'DELETE_POLICY',
    payload:{
      name:name
    }
  }
}

//create claim

const createClaim=(name,amountOfMoneyToCollect)=>{
  return{
    type:'CREATE_CLAIM',
    payload:{
      name:name,
      amountOfMoneyToCollect: amountOfMoneyToCollect
    }
  }
}
//Reducer

const claimHistory=(oldListOfClaim=[], action)=>{
  if(action.type === 'CREATE_CLAIM'){
    //we care about form
    return[...oldListOfClaim,action.payload];
  }
  //we don't care about form
  return oldListOfClaim;
}
const accounting=(bagOfMoney=100, action)=>{
  if(action.type ==='CREATE_CLAIM'){
    return bagOfMoney - action.payload.amountOfMoneyToCollect;
  }else if(action.type ==='CREATE_POLICY'){
    return bagOfMoney + action.payload.amount;
  }
  return bagOfMoney;
}

const policies=(listOfPolicies=[], action)=>{
  if(action.type === 'CREATE_POLICY'){
    return [...listOfPolicies, action.payload.name];
  }else if(action.type === 'DELETE_POLICY'){
    return listOfPolicies.filter(name =>name !==action.payload.name);
  }
  return listOfPolicies;
}


//console.log(Redux);

const {createStore, combineReducers}=Redux;

const ourDepartements=combineReducers({
  accounting:accounting,
  claimHistory:claimHistory,
  policies:policies
});

const store=createStore(ourDepartements);
//const action =createPolicy('Alex',20);
store.dispatch(createPolicy('Alex',20));
store.dispatch(createPolicy('Mim',30));
store.dispatch(createPolicy('Bob',40));

store.dispatch(createClaim('Jem',120));
store.dispatch(createClaim('Rein',50));

store.dispatch(deletePolicy('Bob'));


console.log(store.getState());











